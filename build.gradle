
plugins {
	id 'application'
	id 'java-library'
	id 'checkstyle'
	id 'jacoco' // code coverage
	id 'io.freefair.lombok' version '5.3.0'
	id 'com.github.johnrengelman.shadow' version '6.0.0'
}

group = 'com.xenosnowfox'
version = '0.0.0'
mainClassName = 'com.xenosnowfox.streamagrams.Application'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
	mavenCentral()
}

dependencies {
	// Vendor Dependencies
	compileOnly 'org.projectlombok:lombok:1.18.20' // LomBok Project
	annotationProcessor 'org.projectlombok:lombok:1.18.20' // LomBok Project
	implementation 'com.h2database:h2:1.4.200' // H2 Embedded Database
	implementation 'com.sparkjava:spark-core:2.9.3'
	implementation 'commons-dbutils:commons-dbutils:1.7'
	implementation 'org.apache.commons:commons-dbcp2:2.8.0'
	implementation 'javax.websocket:javax.websocket-api:1.1'
	implementation 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.9'

	// Testing Dependencies
	testCompileOnly 'org.projectlombok:lombok:1.18.20' // LomBok Project
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.20' // LomBok Project
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.2'
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

// Output to build/libs/streamagrams.jar
shadowJar {
	archiveBaseName.set('streamagrams')
	archiveClassifier.set('')
	archiveVersion.set("${project.property('version')}")
}

jacoco {
	toolVersion = "0.8.5"
	reportsDir = file("$buildDir/jacoco")
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
	maxParallelForks = 1
	maxHeapSize = '768m'
	// forkEvery = 100

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle("|  + Running test: " + descriptor)
	}

	beforeSuite { descriptor ->
		logger.lifecycle("|")
		logger.lifecycle("+- Running Suite: " + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		logger.lifecycle("|       " + event.message )
	}
}

tasks.withType(Checkstyle) {
	reports {
		xml.enabled true
		html.enabled false
	}
}

processResources {
	filesMatching('**/*.properties') {
		filter { it.replace("\${project.name}", 'Streamagrams') }
		filter { it.replace("\${project.version}", "${project.property('version')}")  }
		filter { it.replace("\${project.group}", "${project.property('group')}") }
	}
}
